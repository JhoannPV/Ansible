---
- name: Instalar MicroK8s en Ubuntu/Debian
  hosts: localhost
  become: yes
  tasks:

    - name: Crear directorio ~/.kube si no existe
      ansible.builtin.file:
        path: "/home/{{ ansible_user_id }}/.kube"
        state: directory
        mode: '0755'
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
      when: ansible_user_id != 'root'



    - name: Asegurarse de que snapd est√° instalado
      ansible.builtin.apt:
        name: snapd
        state: present
        update_cache: yes
      when: ansible_os_family == "Debian"

    - name: Habilitar y arrancar snapd
      ansible.builtin.service:
        name: snapd
        state: started
        enabled: yes
      when: ansible_os_family == "Debian"

    - name: Comprobar existencia de /var/lib/snapd/snap
      ansible.builtin.stat:
        path: /var/lib/snapd/snap
      register: snap_src
      when: ansible_os_family == "Debian"

    # Symlink se intentar√° crear despu√©s de instalar 'core'

    - name: Comprobar si microk8s ya est√° instalado
      ansible.builtin.command: /usr/bin/snap list microk8s
      register: microk8s_list
      failed_when: false
      changed_when: false

    - name: Instalar snap core si no est√° presente
      ansible.builtin.command: /usr/bin/snap install core
      when: microk8s_list.rc != 0

    - name: Comprobar existencia de /var/lib/snapd/snap (post-core)
      ansible.builtin.stat:
        path: /var/lib/snapd/snap
      register: snap_src_after
      when: ansible_os_family == "Debian"

    - name: Asegurar symlink /snap -> /var/lib/snapd/snap (post-core)
      ansible.builtin.file:
        src: /var/lib/snapd/snap
        dest: /snap
        state: link
        force: yes
      when: ansible_os_family == "Debian" and snap_src_after.stat.exists | default(false)

    - name: Instalar MicroK8s (classic) si no est√° presente
      ansible.builtin.command: /usr/bin/snap install microk8s --classic
      when: microk8s_list.rc != 0

    - name: Agregar usuario actual al grupo microk8s (equivalente a usermod -a -G microk8s usuario)
      ansible.builtin.user:
        name: "{{ ansible_user_id }}"
        groups: microk8s
        append: yes

    - name: Cambiar propietario de ~/.kube al usuario actual (equivalente a chown -R usuario ~/.kube)
      ansible.builtin.file:
        path: "/home/{{ ansible_user_id }}/.kube"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
        recurse: yes
      when: ansible_user_id != 'root'

    - name: Esperar a que MicroK8s est√© completamente listo
      ansible.builtin.command: /snap/bin/microk8s status --wait-ready --timeout 120
      register: microk8s_ready
      changed_when: false

    - name: Habilitar complementos b√°sicos de MicroK8s
      ansible.builtin.command: /snap/bin/microk8s enable dns storage
      register: microk8s_enable
      changed_when: "'Nothing to do for' not in microk8s_enable.stdout"
      failed_when: false

    - name: Obtener kubeconfig desde microk8s
      ansible.builtin.command: /snap/bin/microk8s config
      register: microk8s_kubeconfig
      changed_when: false

    - name: Guardar kubeconfig en ~/.kube/config (usuario no root)
      ansible.builtin.copy:
        content: "{{ microk8s_kubeconfig.stdout }}\n"
        dest: "/home/{{ ansible_user_id }}/.kube/config"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
        mode: '0600'
      when: ansible_user_id != 'root'

    - name: Guardar kubeconfig en /root/.kube/config (root)
      ansible.builtin.copy:
        content: "{{ microk8s_kubeconfig.stdout }}\n"
        dest: "/root/.kube/config"
        owner: root
        group: root
        mode: '0600'
      when: ansible_user_id == 'root'

    - name: Verificar permisos de MicroK8s para el usuario
      ansible.builtin.shell: |
        sg microk8s -c "/snap/bin/microk8s kubectl get nodes" 2>/dev/null || echo "NEEDS_RELOAD"
      become: yes
      become_user: "{{ ansible_user_id }}"
      register: microk8s_permission_test
      changed_when: false
      when: ansible_user_id != 'root'

    - name: Crear script para activar MicroK8s sin reiniciar sesi√≥n
      ansible.builtin.copy:
        dest: "/home/{{ ansible_user_id }}/reload_microk8s_groups.sh"
        content: |
          #!/bin/bash
          echo "üîß Recargando grupos de MicroK8s para el usuario {{ ansible_user_id }}..."
          echo "üí° Ejecutando: newgrp microk8s"
          echo "‚úÖ Despu√©s de esto podr√°s usar 'kubectl' o 'microk8s kubectl'"
          echo ""
          exec newgrp microk8s
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
        mode: '0755'
      when: ansible_user_id != 'root'

    - name: Mostrar estado final de la instalaci√≥n
      ansible.builtin.debug:
        msg: |
          üéâ ¬°MicroK8s instalado correctamente!
          
          üìã ESTADO DE PERMISOS:
          {% if ansible_user_id != 'root' %}
          {% if 'NEEDS_RELOAD' in microk8s_permission_test.stdout %}
          ‚ö†Ô∏è  Necesitas recargar los grupos del usuario
          
          üîß SOLUCIONES (elige una):
          
          1Ô∏è‚É£ Ejecutar script autom√°tico:
             ./reload_microk8s_groups.sh
          
          2Ô∏è‚É£ Comando manual:
             newgrp microk8s
          
          3Ô∏è‚É£ Reiniciar sesi√≥n:
             Cierra sesi√≥n y vuelve a entrar
          
          ‚úÖ Despu√©s podr√°s usar:
             kubectl get nodes
             microk8s kubectl get nodes
          {% else %}
          ‚úÖ Los permisos est√°n configurados correctamente
          ‚úÖ Puedes usar kubectl directamente
          {% endif %}
          {% else %}
          ‚úÖ Instalaci√≥n como root completada
          {% endif %}
          
          üåê Para acceder desde otros nodos:
             microk8s config > kubeconfig.yaml

    - name: Asegurar que /snap/bin est√© en el PATH del usuario actual
      ansible.builtin.lineinfile:
        path: "/home/{{ ansible_user_id }}/.profile"
        regexp: '^export PATH=.*/snap/bin.*'
        line: 'export PATH="$PATH:/snap/bin"'
        insertafter: EOF
      become: false
      when: ansible_user_id != 'root'

    - name: Crear alias kubectl para microk8s en ~/.bashrc
      ansible.builtin.lineinfile:
        path: "/home/{{ ansible_user_id }}/.bashrc"
        regexp: "^alias kubectl='microk8s kubectl'"
        line: "alias kubectl='microk8s kubectl'"
        insertafter: EOF
        create: yes
      become: false
      when: ansible_user_id != 'root'



    - name: A√±adir /snap/bin al PATH global (para todas las sesiones nuevas)
      ansible.builtin.copy:
        dest: /etc/profile.d/snap_path.sh
        content: 'export PATH="$PATH:/snap/bin"\n'
        owner: root
        group: root
        mode: '0644'
      notify: Recargar perfil no es autom√°tico

    - name: Asegurar PATH para root (opcional)
      ansible.builtin.lineinfile:
        path: /root/.profile
        regexp: '^export PATH=.*/snap/bin.*'
        line: 'export PATH="$PATH:/snap/bin"'
        insertafter: EOF
      when: ansible_user_id == 'root'

    - name: Comprobar si existe /snap/bin/microk8s
      ansible.builtin.stat:
        path: /snap/bin/microk8s
      register: microk8s_bin

    - name: Crear symlink /usr/local/bin/microk8s -> /snap/bin/microk8s (acceso inmediato)
      ansible.builtin.file:
        src: /snap/bin/microk8s
        dest: /usr/local/bin/microk8s
        state: link
        force: yes
        owner: root
        group: root
        mode: '0755'
      when: microk8s_bin.stat.exists | default(false)

    - name: Crear symlink /usr/local/bin/kubectl -> /snap/bin/microk8s.kubectl (opcional)
      ansible.builtin.file:
        src: /snap/bin/microk8s.kubectl
        dest: /usr/local/bin/kubectl
        state: link
        force: yes
        owner: root
        group: root
        mode: '0755'
      when: microk8s_bin.stat.exists | default(false)

  handlers:
    - name: Recargar perfil no es autom√°tico
      ansible.builtin.debug:
        msg: "Se agreg√≥ /snap/bin al PATH en /etc/profile.d/snap_path.sh. Abre una nueva sesi√≥n o ejecuta 'source /etc/profile'."

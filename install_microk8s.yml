---
- name: Instalar MicroK8s en Ubuntu/Debian
  hosts: localhost
  become: yes
  tasks:

    - name: Crear directorio ~/.kube si no existe
      ansible.builtin.file:
        path: "/home/{{ ansible_user_id }}/.kube"
        state: directory
        mode: '0755'
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
      when: ansible_user_id != 'root'

    - name: Cambiar propietario de ~/.kube recursivamente
      ansible.builtin.file:
        path: "/home/{{ ansible_user_id }}/.kube"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
        recurse: yes
      when: ansible_user_id != 'root'

    - name: Asegurarse de que snapd está instalado
      ansible.builtin.apt:
        name: snapd
        state: present
        update_cache: yes
      when: ansible_os_family == "Debian"

    - name: Habilitar y arrancar snapd
      ansible.builtin.service:
        name: snapd
        state: started
        enabled: yes
      when: ansible_os_family == "Debian"

    - name: Comprobar existencia de /var/lib/snapd/snap
      ansible.builtin.stat:
        path: /var/lib/snapd/snap
      register: snap_src
      when: ansible_os_family == "Debian"

    # Symlink se intentará crear después de instalar 'core'

    - name: Comprobar si microk8s ya está instalado
      ansible.builtin.command: /usr/bin/snap list microk8s
      register: microk8s_list
      failed_when: false
      changed_when: false

    - name: Instalar snap core si no está presente
      ansible.builtin.command: /usr/bin/snap install core
      when: microk8s_list.rc != 0

    - name: Comprobar existencia de /var/lib/snapd/snap (post-core)
      ansible.builtin.stat:
        path: /var/lib/snapd/snap
      register: snap_src_after
      when: ansible_os_family == "Debian"

    - name: Asegurar symlink /snap -> /var/lib/snapd/snap (post-core)
      ansible.builtin.file:
        src: /var/lib/snapd/snap
        dest: /snap
        state: link
        force: yes
      when: ansible_os_family == "Debian" and snap_src_after.stat.exists | default(false)

    - name: Instalar MicroK8s (classic) si no está presente
      ansible.builtin.command: /usr/bin/snap install microk8s --classic
      when: microk8s_list.rc != 0

    - name: Agregar usuario actual al grupo microk8s
      ansible.builtin.user:
        name: "{{ ansible_user_id }}"
        groups: microk8s
        append: yes

    - name: Asegurar que /snap/bin esté en el PATH del usuario actual
      ansible.builtin.lineinfile:
        path: "/home/{{ ansible_user_id }}/.profile"
        regexp: '^export PATH=.*/snap/bin.*'
        line: 'export PATH="$PATH:/snap/bin"'
        insertafter: EOF
      become: false
      when: ansible_user_id != 'root'

    - name: Añadir /snap/bin al PATH global (para todas las sesiones nuevas)
      ansible.builtin.copy:
        dest: /etc/profile.d/snap_path.sh
        content: 'export PATH="$PATH:/snap/bin"\n'
        owner: root
        group: root
        mode: '0644'
      notify: Recargar perfil no es automático

    - name: Asegurar PATH para root (opcional)
      ansible.builtin.lineinfile:
        path: /root/.profile
        regexp: '^export PATH=.*/snap/bin.*'
        line: 'export PATH="$PATH:/snap/bin"'
        insertafter: EOF
      when: ansible_user_id == 'root'

    - name: Comprobar si existe /snap/bin/microk8s
      ansible.builtin.stat:
        path: /snap/bin/microk8s
      register: microk8s_bin

    - name: Crear symlink /usr/local/bin/microk8s -> /snap/bin/microk8s (acceso inmediato)
      ansible.builtin.file:
        src: /snap/bin/microk8s
        dest: /usr/local/bin/microk8s
        state: link
        force: yes
        owner: root
        group: root
        mode: '0755'
      when: microk8s_bin.stat.exists | default(false)

    - name: Crear symlink /usr/local/bin/kubectl -> /snap/bin/microk8s.kubectl (opcional)
      ansible.builtin.file:
        src: /snap/bin/microk8s.kubectl
        dest: /usr/local/bin/kubectl
        state: link
        force: yes
        owner: root
        group: root
        mode: '0755'
      when: microk8s_bin.stat.exists | default(false)

  handlers:
    - name: Recargar perfil no es automático
      ansible.builtin.debug:
        msg: "Se agregó /snap/bin al PATH en /etc/profile.d/snap_path.sh. Abre una nueva sesión o ejecuta 'source /etc/profile'."

    - name: Esperar a que MicroK8s esté listo
      ansible.builtin.command: /snap/bin/microk8s status --wait-ready --timeout 600
      register: microk8s_ready
      changed_when: false

    - name: Habilitar complementos básicos de MicroK8s (opcional)
      ansible.builtin.command: /snap/bin/microk8s enable dns storage
      register: microk8s_enable
      changed_when: "'Nothing to do for' not in microk8s_enable.stdout"
      failed_when: false
      become: yes
      become_user: root

    - name: Obtener kubeconfig desde microk8s
      ansible.builtin.command: /snap/bin/microk8s config
      register: microk8s_kubeconfig
      changed_when: false

    - name: Guardar kubeconfig en ~/.kube/config (usuario no root)
      ansible.builtin.copy:
        content: "{{ microk8s_kubeconfig.stdout }}\n"
        dest: "/home/{{ ansible_user_id }}/.kube/config"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
        mode: '0600'
      when: ansible_user_id != 'root'

    - name: Guardar kubeconfig en /root/.kube/config (root)
      ansible.builtin.copy:
        content: "{{ microk8s_kubeconfig.stdout }}\n"
        dest: "/root/.kube/config"
        owner: root
        group: root
        mode: '0600'
      when: ansible_user_id == 'root'

    # ==========================================
    # SCRIPT POST-INSTALACIÓN PARA EJECUCIÓN MANUAL
    # ==========================================
    
    - name: Crear script de configuración post-instalación
      ansible.builtin.copy:
        dest: /tmp/configure_microk8s_sysadmin.sh
        mode: '0755'
        content: |
          #!/bin/bash
          echo "=== Configurando MicroK8s para usuario sysadmin ==="
          
          # 1. Agregar usuario al grupo
          echo "1. Agregando sysadmin al grupo microk8s..."
          usermod -a -G microk8s sysadmin
          
          # 2. Configurar directorio .kube
          echo "2. Configurando directorio .kube..."
          mkdir -p /home/sysadmin/.kube
          chown -R sysadmin:sysadmin /home/sysadmin/.kube
          chmod 755 /home/sysadmin/.kube
          
          # 3. Crear enlace simbólico kubectl
          echo "3. Creando enlace simbólico para kubectl..."
          rm -f /usr/local/bin/kubectl
          ln -sf /snap/bin/microk8s.kubectl /usr/local/bin/kubectl
          
          # 4. Configurar aliases
          echo "4. Configurando aliases en .bashrc..."
          if ! grep -q "alias kubectl=" /home/sysadmin/.bashrc 2>/dev/null; then
            echo 'alias kubectl="/usr/local/bin/kubectl"' >> /home/sysadmin/.bashrc
            echo 'alias k="kubectl"' >> /home/sysadmin/.bashrc
          fi
          
          # 5. Mostrar estado
          echo "5. Verificando configuración..."
          echo "   Grupos de sysadmin: $(groups sysadmin)"
          echo "   Enlace kubectl: $(ls -la /usr/local/bin/kubectl 2>/dev/null || echo 'No encontrado')"
          echo "   Directorio .kube: $(ls -ld /home/sysadmin/.kube 2>/dev/null || echo 'No encontrado')"
          
          echo ""
          echo "=== CONFIGURACIÓN COMPLETADA ==="
          echo "Para usar MicroK8s como sysadmin:"
          echo "1. sudo su - sysadmin"
          echo "2. newgrp microk8s"
          echo "3. kubectl get nodes"
          echo ""

    - name: Ejecutar script de configuración
      ansible.builtin.command: /tmp/configure_microk8s_sysadmin.sh
      register: config_script_result

    - name: Mostrar resultado del script de configuración
      ansible.builtin.debug:
        var: config_script_result.stdout_lines

    - name: Crear instrucciones finales para el usuario
      ansible.builtin.copy:
        dest: /home/sysadmin/INSTRUCCIONES_MICROK8S.txt
        owner: sysadmin
        group: sysadmin
        mode: '0644'
        content: |
          ============================================
          INSTRUCCIONES PARA USAR MICROK8S SIN SUDO
          ============================================
          
          Si aún necesitas sudo para usar microk8s, ejecuta estos comandos:
          
          1. Cambiar a usuario sysadmin:
             sudo su - sysadmin
          
          2. Activar grupo microk8s:
             newgrp microk8s
          
          3. Probar kubectl:
             kubectl get nodes
             microk8s status
          
          COMANDOS ALTERNATIVOS SI LO ANTERIOR NO FUNCIONA:
          
          sudo usermod -a -G microk8s sysadmin
          sudo chown -R sysadmin:sysadmin /home/sysadmin/.kube
          sudo ln -sf /snap/bin/microk8s.kubectl /usr/local/bin/kubectl
          
          Luego:
          sudo su - sysadmin
          newgrp microk8s
          kubectl get nodes
          
          ============================================

    - name: MOSTRAR INSTRUCCIONES FINALES
      ansible.builtin.debug:
        msg:
          - "=========================================="
          - "MICROK8S INSTALADO"
          - "=========================================="
          - "✅ MicroK8s instalado correctamente"
          - "✅ Script de configuración ejecutado"
          - "✅ Instrucciones creadas en /home/sysadmin/INSTRUCCIONES_MICROK8S.txt"
          - ""
          - "PARA USAR MICROK8S SIN SUDO:"
          - "1. sudo su - sysadmin"
          - "2. newgrp microk8s"
          - "3. kubectl get nodes"
          - ""
          - "Si necesitas configuración manual, lee:"
          - "/home/sysadmin/INSTRUCCIONES_MICROK8S.txt"
          - "=========================================="

---
- name: Instalar MicroK8s en Ubuntu/Debian
  hosts: localhost
  become: yes
  tasks:

    - name: Crear directorio ~/.kube si no existe
      ansible.builtin.file:
        path: "/home/{{ ansible_user_id }}/.kube"
        state: directory
        mode: '0755'
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
      when: ansible_user_id != 'root'

    - name: Cambiar propietario de ~/.kube recursivamente
      ansible.builtin.file:
        path: "/home/{{ ansible_user_id }}/.kube"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
        recurse: yes
      when: ansible_user_id != 'root'

    - name: Asegurarse de que snapd está instalado
      ansible.builtin.apt:
        name: snapd
        state: present
        update_cache: yes
      when: ansible_os_family == "Debian"

    - name: Habilitar y arrancar snapd
      ansible.builtin.service:
        name: snapd
        state: started
        enabled: yes
      when: ansible_os_family == "Debian"

    - name: Comprobar existencia de /var/lib/snapd/snap
      ansible.builtin.stat:
        path: /var/lib/snapd/snap
      register: snap_src
      when: ansible_os_family == "Debian"

    # Symlink se intentará crear después de instalar 'core'

    - name: Comprobar si microk8s ya está instalado
      ansible.builtin.command: /usr/bin/snap list microk8s
      register: microk8s_list
      failed_when: false
      changed_when: false

    - name: Instalar snap core si no está presente
      ansible.builtin.command: /usr/bin/snap install core
      when: microk8s_list.rc != 0

    - name: Comprobar existencia de /var/lib/snapd/snap (post-core)
      ansible.builtin.stat:
        path: /var/lib/snapd/snap
      register: snap_src_after
      when: ansible_os_family == "Debian"

    - name: Asegurar symlink /snap -> /var/lib/snapd/snap (post-core)
      ansible.builtin.file:
        src: /var/lib/snapd/snap
        dest: /snap
        state: link
        force: yes
      when: ansible_os_family == "Debian" and snap_src_after.stat.exists | default(false)

    - name: Instalar MicroK8s (classic) si no está presente
      ansible.builtin.command: /usr/bin/snap install microk8s --classic
      when: microk8s_list.rc != 0

    - name: Agregar usuario actual al grupo microk8s
      ansible.builtin.user:
        name: "{{ ansible_user_id }}"
        groups: microk8s
        append: yes

    - name: Asegurar que /snap/bin esté en el PATH del usuario actual
      ansible.builtin.lineinfile:
        path: "/home/{{ ansible_user_id }}/.profile"
        regexp: '^export PATH=.*/snap/bin.*'
        line: 'export PATH="$PATH:/snap/bin"'
        insertafter: EOF
      become: false
      when: ansible_user_id != 'root'

    - name: Añadir /snap/bin al PATH global (para todas las sesiones nuevas)
      ansible.builtin.copy:
        dest: /etc/profile.d/snap_path.sh
        content: 'export PATH="$PATH:/snap/bin"\n'
        owner: root
        group: root
        mode: '0644'
      notify: Recargar perfil no es automático

    - name: Asegurar PATH para root (opcional)
      ansible.builtin.lineinfile:
        path: /root/.profile
        regexp: '^export PATH=.*/snap/bin.*'
        line: 'export PATH="$PATH:/snap/bin"'
        insertafter: EOF
      when: ansible_user_id == 'root'

    - name: Comprobar si existe /snap/bin/microk8s
      ansible.builtin.stat:
        path: /snap/bin/microk8s
      register: microk8s_bin

    - name: Crear symlink /usr/local/bin/microk8s -> /snap/bin/microk8s (acceso inmediato)
      ansible.builtin.file:
        src: /snap/bin/microk8s
        dest: /usr/local/bin/microk8s
        state: link
        force: yes
        owner: root
        group: root
        mode: '0755'
      when: microk8s_bin.stat.exists | default(false)

    - name: Crear symlink /usr/local/bin/kubectl -> /snap/bin/microk8s.kubectl (opcional)
      ansible.builtin.file:
        src: /snap/bin/microk8s.kubectl
        dest: /usr/local/bin/kubectl
        state: link
        force: yes
        owner: root
        group: root
        mode: '0755'
      when: microk8s_bin.stat.exists | default(false)

  handlers:
    - name: Recargar perfil no es automático
      ansible.builtin.debug:
        msg: "Se agregó /snap/bin al PATH en /etc/profile.d/snap_path.sh. Abre una nueva sesión o ejecuta 'source /etc/profile'."

    - name: Esperar a que MicroK8s esté listo
      ansible.builtin.command: /snap/bin/microk8s status --wait-ready --timeout 600
      register: microk8s_ready
      changed_when: false

    - name: Habilitar complementos básicos de MicroK8s (opcional)
      ansible.builtin.command: /snap/bin/microk8s enable dns storage
      register: microk8s_enable
      changed_when: "'Nothing to do for' not in microk8s_enable.stdout"
      failed_when: false
      become: yes
      become_user: root

    - name: Obtener kubeconfig desde microk8s
      ansible.builtin.command: /snap/bin/microk8s config
      register: microk8s_kubeconfig
      changed_when: false

    - name: Guardar kubeconfig en ~/.kube/config (usuario no root)
      ansible.builtin.copy:
        content: "{{ microk8s_kubeconfig.stdout }}\n"
        dest: "/home/{{ ansible_user_id }}/.kube/config"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
        mode: '0600'
      when: ansible_user_id != 'root'

    - name: Guardar kubeconfig en /root/.kube/config (root)
      ansible.builtin.copy:
        content: "{{ microk8s_kubeconfig.stdout }}\n"
        dest: "/root/.kube/config"
        owner: root
        group: root
        mode: '0600'
      when: ansible_user_id == 'root'

    # ==========================================
    # CONFIGURACIÓN ROBUSTA PARA USUARIO SYSADMIN
    # ==========================================
    
    - name: 1. Agregar sysadmin al grupo microk8s (FORZADO)
      ansible.builtin.shell: |
        usermod -a -G microk8s sysadmin
        # Verificar que se agregó correctamente
        groups sysadmin | grep -q microk8s && echo "Usuario agregado al grupo microk8s" || echo "Error al agregar usuario"
      register: usermod_result
      
    - name: 2. Crear directorio .kube para sysadmin si no existe
      ansible.builtin.file:
        path: /home/sysadmin/.kube
        state: directory
        owner: sysadmin
        group: sysadmin
        mode: '0755'

    - name: 3. Cambiar propietario de ~/.kube recursivamente (FORZADO)
      ansible.builtin.shell: |
        chown -R sysadmin:sysadmin /home/sysadmin/.kube
        chmod -R 755 /home/sysadmin/.kube
        ls -la /home/sysadmin/.kube
      register: chown_result

    - name: 4. Crear enlace simbólico kubectl (FORZADO)
      ansible.builtin.shell: |
        rm -f /usr/local/bin/kubectl
        ln -sf /snap/bin/microk8s.kubectl /usr/local/bin/kubectl
        ls -la /usr/local/bin/kubectl
      register: symlink_result

    - name: 5. Configurar permisos especiales de MicroK8s
      ansible.builtin.shell: |
        # Permisos del socket de MicroK8s
        chmod g+rw /var/snap/microk8s/current/credentials/client.config 2>/dev/null || true
        chgrp microk8s /var/snap/microk8s/current/credentials/client.config 2>/dev/null || true
        
        # Permisos del directorio credentials
        chmod g+rx /var/snap/microk8s/current/credentials 2>/dev/null || true
        chgrp microk8s /var/snap/microk8s/current/credentials 2>/dev/null || true
      register: perms_result
      failed_when: false

    - name: 6. Crear script de activación para sysadmin
      ansible.builtin.copy:
        dest: /home/sysadmin/activate_microk8s.sh
        owner: sysadmin
        group: sysadmin
        mode: '0755'
        content: |
          #!/bin/bash
          echo "=== Activando MicroK8s para usuario sysadmin ==="
          echo "Grupos actuales: $(groups)"
          
          # Forzar nuevo grupo
          exec newgrp microk8s
          
    - name: 7. Agregar aliases permanentes al .bashrc
      ansible.builtin.blockinfile:
        path: /home/sysadmin/.bashrc
        owner: sysadmin
        group: sysadmin
        create: yes
        block: |
          # Aliases para MicroK8s
          alias kubectl='/usr/local/bin/kubectl'
          alias k='kubectl'
          alias microk8s='/snap/bin/microk8s'
          
          # Verificar si está en grupo microk8s
          if groups | grep -q microk8s; then
            echo "✅ Usuario en grupo microk8s - MicroK8s listo"
          else
            echo "⚠️  Ejecuta: newgrp microk8s"
          fi

    - name: 8. Test final como usuario sysadmin
      ansible.builtin.shell: |
        sudo -u sysadmin /snap/bin/microk8s status --wait-ready --timeout 30
      register: final_test
      failed_when: false
      timeout: 45

    - name: 9. MOSTRAR RESULTADOS DE CONFIGURACIÓN
      ansible.builtin.debug:
        msg:
          - "=========================================="
          - "CONFIGURACIÓN MICROK8S PARA SYSADMIN"
          - "=========================================="
          - "1. Usermod: {{ usermod_result.stdout_lines | default(['Error']) }}"
          - "2. Chown result: {{ chown_result.stdout_lines | default(['Error']) }}"
          - "3. Symlink: {{ symlink_result.stdout_lines | default(['Error']) }}"
          - "4. Permisos especiales: {{ 'Aplicados' if perms_result.rc == 0 else 'Con errores' }}"
          - "5. Test final: {{ 'EXITOSO' if final_test.rc == 0 else 'FALLÓ - requiere configuración manual' }}"
          - ""
          - "COMANDOS PARA USAR MANUALMENTE SI FALLA:"
          - "sudo usermod -a -G microk8s sysadmin"
          - "sudo chown -R sysadmin:sysadmin /home/sysadmin/.kube"
          - "sudo ln -sf /snap/bin/microk8s.kubectl /usr/local/bin/kubectl"
          - "sudo su - sysadmin"
          - "newgrp microk8s"
          - "kubectl get nodes"
          - "=========================================="

---
- name: Desplegar Calendar App con Services ClusterIP en MicroK8s
  hosts: controller
  vars_files:
    - vars/env.yml

  vars:
    k8s_tmp_dir: "/tmp/calendar-k8s"

  tasks:
    - name: Validar que K8S_NAMESPACE esté definido (proveer en vars/env.yml o via -e)
      ansible.builtin.assert:
        that:
          - K8S_NAMESPACE is defined
          - K8S_NAMESPACE | length > 0
        fail_msg: "K8S_NAMESPACE no está definido. Establécelo en Ansible/vars/env.yml o pásalo con -e K8S_NAMESPACE=<namespace>."

    - name: Mostrar namespace efectivo
      ansible.builtin.debug:
        msg: "Usando namespace: {{ K8S_NAMESPACE }}"

    - name: Validar imágenes requeridas (FRONTEND_IMAGE, BACKEND_IMAGE, MONGODB_IMAGE)
      ansible.builtin.assert:
        that:
          - FRONTEND_IMAGE is defined
          - FRONTEND_IMAGE | length > 0
          - BACKEND_IMAGE is defined
          - BACKEND_IMAGE | length > 0
          - MONGODB_IMAGE is defined
          - MONGODB_IMAGE | length > 0
        fail_msg: "Faltan variables de imagen. Define FRONTEND_IMAGE, BACKEND_IMAGE y MONGODB_IMAGE en Ansible/vars/env.yml."

    - name: Validar variables de Secret requeridas (Mongo, Backend y Frontend)
      ansible.builtin.assert:
        that:
          - MONGO_INITDB_USERNAME is defined
          - MONGO_INITDB_USERNAME | length > 0
          - MONGO_INITDB_PASSWORD is defined
          - MONGO_INITDB_PASSWORD | length > 0
          - MONGO_DB_NAME is defined
          - MONGO_DB_NAME | length > 0
          - MONGO_URL is defined
          - MONGO_URL | length > 0
          - JWT_SEED is defined
          - JWT_SEED | length > 0
          - PORT is defined
          - VITE_API_URL is defined
          - VITE_API_URL | length > 0
        fail_msg: "Faltan variables para el Secret. Revisa Ansible/vars/env.yml (Mongo creds/URL, JWT_SEED, PORT, VITE_API_URL)."

    

    - name: Crear directorio temporal para manifests
      ansible.builtin.file:
        path: "{{ k8s_tmp_dir }}"
        state: directory
        mode: '0755'
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
        recurse: true
      become: true

    - name: Render namespace
      ansible.builtin.template:
        src: templates/k8s/namespace.yaml.j2
        dest: "{{ k8s_tmp_dir }}/00-namespace.yaml"

    - name: Render secret con variables de entorno
      ansible.builtin.template:
        src: templates/k8s/secret-env.yaml.j2
        dest: "{{ k8s_tmp_dir }}/01-secret-env.yaml"
      no_log: true

    

    - name: Render MongoDB manifests
      ansible.builtin.template:
        src: templates/k8s/mongodb-deployment.yaml.j2
        dest: "{{ k8s_tmp_dir }}/10-mongodb-deployment.yaml"
    
    - name: Render MongoDB service
      ansible.builtin.template:
        src: templates/k8s/mongodb-service.yaml.j2
        dest: "{{ k8s_tmp_dir }}/11-mongodb-service.yaml"

    - name: Render Backend manifests
      ansible.builtin.template:
        src: templates/k8s/backend-deployment.yaml.j2
        dest: "{{ k8s_tmp_dir }}/20-backend-deployment.yaml"

    - name: Render Backend service
      ansible.builtin.template:
        src: templates/k8s/backend-service.yaml.j2
        dest: "{{ k8s_tmp_dir }}/21-backend-service.yaml"

    - name: Render Frontend configmap (nginx)
      ansible.builtin.template:
        src: templates/k8s/frontend-configmap.yaml.j2
        dest: "{{ k8s_tmp_dir }}/30-frontend-configmap.yaml"

    - name: Render Frontend deployment
      ansible.builtin.template:
        src: templates/k8s/frontend-deployment.yaml.j2
        dest: "{{ k8s_tmp_dir }}/31-frontend-deployment.yaml"

    - name: Render Frontend service
      ansible.builtin.template:
        src: templates/k8s/frontend-service.yaml.j2
        dest: "{{ k8s_tmp_dir }}/32-frontend-service.yaml"

    - name: Aplicar namespace
      ansible.builtin.command: "microk8s kubectl apply -f {{ k8s_tmp_dir }}/00-namespace.yaml"

    - name: Aplicar secret
      ansible.builtin.command: "microk8s kubectl apply -f {{ k8s_tmp_dir }}/01-secret-env.yaml"

    

    - name: Desplegar MongoDB (deployment y service)
      ansible.builtin.shell: |
        set -e
        microk8s kubectl -n {{ K8S_NAMESPACE }} apply -f {{ k8s_tmp_dir }}/10-mongodb-deployment.yaml
        microk8s kubectl -n {{ K8S_NAMESPACE }} apply -f {{ k8s_tmp_dir }}/11-mongodb-service.yaml

    - block:
        - name: Esperar a que MongoDB esté listo
          ansible.builtin.command: "microk8s kubectl -n {{ K8S_NAMESPACE }} rollout status deployment/mongodb --timeout=600s"
          register: rollout_mongo
          retries: 10
          delay: 5
          until: rollout_mongo.rc == 0
          become: false
      rescue:
        - name: Listar pods de MongoDB
          ansible.builtin.command: "microk8s kubectl -n {{ K8S_NAMESPACE }} get pods -l app=mongodb -o wide"
          register: mongo_pods
          ignore_errors: true
          become: false
        - name: Describir deployment de MongoDB
          ansible.builtin.command: "microk8s kubectl -n {{ K8S_NAMESPACE }} describe deployment/mongodb"
          register: mongo_deploy_desc
          ignore_errors: true
          become: false
        - name: Describir pods de MongoDB
          ansible.builtin.command: "microk8s kubectl -n {{ K8S_NAMESPACE }} describe pods -l app=mongodb"
          register: mongo_pods_desc
          ignore_errors: true
          become: false
        - name: Ver estado del PVC/PV de MongoDB
          ansible.builtin.command: "microk8s kubectl -n {{ K8S_NAMESPACE }} get pvc,pv"
          register: mongo_pvc_pv
          ignore_errors: true
          become: false
        - name: Describir PVC mongo-data
          ansible.builtin.command: "microk8s kubectl -n {{ K8S_NAMESPACE }} describe pvc mongo-data"
          register: mongo_pvc_desc
          ignore_errors: true
          become: false
        - name: Logs de MongoDB (ultimas 200 líneas)
          ansible.builtin.command: "microk8s kubectl -n {{ K8S_NAMESPACE }} logs deploy/mongodb -c mongodb --tail=200"
          register: mongo_logs
          ignore_errors: true
          become: false
        - name: Mostrar diagnostico MongoDB
          ansible.builtin.debug:
            msg:
              - "PODS: {{ mongo_pods.stdout | default('') }}"
              - "DEPLOY DESCRIBE: {{ mongo_deploy_desc.stdout | default('') }}"
              - "PODS DESCRIBE: {{ mongo_pods_desc.stdout | default('') }}"
              - "PVC/PV: {{ mongo_pvc_pv.stdout | default('') }}"
              - "PVC DESCRIBE: {{ mongo_pvc_desc.stdout | default('') }}"
              - "LOGS:\n{{ mongo_logs.stdout | default('') }}"
        - name: Fallar explícitamente por timeout de MongoDB
          ansible.builtin.fail:
            msg: "MongoDB no alcanzó estado listo dentro del tiempo. Revisa los eventos/logs mostrados arriba."

    - name: Desplegar Backend (deployment y service)
      ansible.builtin.shell: |
        set -e
        microk8s kubectl -n {{ K8S_NAMESPACE }} apply -f {{ k8s_tmp_dir }}/20-backend-deployment.yaml
        microk8s kubectl -n {{ K8S_NAMESPACE }} apply -f {{ k8s_tmp_dir }}/21-backend-service.yaml
      args:
        executable: /bin/bash

    - name: Reiniciar rollout del Backend para tomar cambios de Secret/env
      ansible.builtin.command: "microk8s kubectl -n {{ K8S_NAMESPACE }} rollout restart deployment/calendar-backend"
      become: false

    - block:
        - name: Esperar a que Backend esté listo
          ansible.builtin.command: "microk8s kubectl -n {{ K8S_NAMESPACE }} rollout status deployment/calendar-backend --timeout=600s"
          register: rollout_be
          retries: 10
          delay: 5
          until: rollout_be.rc == 0
          become: false
      rescue:
        - name: Listar pods del backend
          ansible.builtin.command: "microk8s kubectl -n {{ K8S_NAMESPACE }} get pods -l app=calendar-backend -o wide"
          register: be_pods
          ignore_errors: true
          become: false
        - name: Describir deployment del backend
          ansible.builtin.command: "microk8s kubectl -n {{ K8S_NAMESPACE }} describe deployment/calendar-backend"
          register: be_deploy_desc
          ignore_errors: true
          become: false
        - name: Describir pods del backend
          ansible.builtin.command: "microk8s kubectl -n {{ K8S_NAMESPACE }} describe pods -l app=calendar-backend"
          register: be_pods_desc
          ignore_errors: true
          become: false
        - name: Logs del backend (ultimas 200 líneas)
          ansible.builtin.command: "microk8s kubectl -n {{ K8S_NAMESPACE }} logs deploy/calendar-backend -c backend --tail=200"
          register: be_logs
          ignore_errors: true
          become: false
        - name: Mostrar diagnostico backend
          ansible.builtin.debug:
            msg:
              - "PODS: {{ be_pods.stdout | default('') }}"
              - "DEPLOY DESCRIBE: {{ be_deploy_desc.stdout | default('') }}"
              - "PODS DESCRIBE: {{ be_pods_desc.stdout | default('') }}"
              - "LOGS:\n{{ be_logs.stdout | default('') }}"
        - name: Fallar explícitamente por timeout del backend
          ansible.builtin.fail:
            msg: "El backend no alcanzó estado listo dentro del tiempo. Revisa los logs y eventos mostrados arriba."

    - name: Desplegar Frontend (configmap, deployment y service)
      ansible.builtin.shell: |
        set -e
        microk8s kubectl -n {{ K8S_NAMESPACE }} apply -f {{ k8s_tmp_dir }}/30-frontend-configmap.yaml
        microk8s kubectl -n {{ K8S_NAMESPACE }} apply -f {{ k8s_tmp_dir }}/31-frontend-deployment.yaml
        microk8s kubectl -n {{ K8S_NAMESPACE }} apply -f {{ k8s_tmp_dir }}/32-frontend-service.yaml
      args:
        executable: /bin/bash

    - name: Reiniciar rollout del Frontend para tomar cambios de ConfigMap
      ansible.builtin.command: "microk8s kubectl -n {{ K8S_NAMESPACE }} rollout restart deployment/calendar-frontend"
      become: false

    - name: Esperar a que Frontend esté listo
      ansible.builtin.command: "microk8s kubectl -n {{ K8S_NAMESPACE }} rollout status deployment/calendar-frontend --timeout=600s"
      register: rollout_fe
      retries: 10
      delay: 5
      until: rollout_fe.rc == 0
      become: false

    - name: Mostrar Services creados
      ansible.builtin.command: "microk8s kubectl -n {{ K8S_NAMESPACE }} get svc"
      register: svc_out
      become: false

    - name: Imprimir Services
      ansible.builtin.debug:
        var: svc_out.stdout_lines

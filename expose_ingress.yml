---
- name: Exponer frontend con Ingress en MicroK8s
  hosts: controller
  vars_files:
    - vars/env.yml

  vars:
    k8s_tmp_dir: "/tmp/calendar-k8s"

  tasks:
    - name: Validar que K8S_NAMESPACE esté definido (proveer en vars/env.yml o via -e)
      ansible.builtin.assert:
        that:
          - K8S_NAMESPACE is defined
          - K8S_NAMESPACE | length > 0
        fail_msg: "K8S_NAMESPACE no está definido. Establécelo en Ansible/vars/env.yml o pásalo con -e K8S_NAMESPACE=<namespace>."

    - name: Validar que HOST_NAME esté definido para el Ingress
      ansible.builtin.assert:
        that:
          - HOST_NAME is defined
          - HOST_NAME | length > 0
        fail_msg: "HOST_NAME no está definido. Establécelo en Ansible/vars/env.yml o pásalo con -e HOST_NAME=<host>."

    - name: Crear directorio temporal para manifests (si no existe)
      ansible.builtin.file:
        path: "{{ k8s_tmp_dir }}"
        state: directory
        mode: '0755'
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
        recurse: true
      become: true

    - name: Habilitar addon ingress en MicroK8s (idempotente)
      ansible.builtin.command: microk8s enable ingress
      become: true
      register: ingress_enable
      changed_when: "'Nothing to do for ingress' not in ingress_enable.stdout"

    - name: Esperar a que el Ingress Controller esté listo
      ansible.builtin.command: "microk8s kubectl -n ingress get pods -o wide"
      register: ingress_pods
      until: ingress_pods.stdout is search('Running')
      retries: 15
      delay: 8
      become: false

    - name: Eliminar Ingress legacy 'calendar-ingress' si existe (para evitar conflicto de host)
      ansible.builtin.command: "microk8s kubectl -n {{ K8S_NAMESPACE }} delete ingress calendar-ingress --ignore-not-found"
      become: false

    - name: Render Ingress para el frontend
      ansible.builtin.template:
        src: templates/k8s/ingress.yaml.j2
        dest: "{{ k8s_tmp_dir }}/40-frontend-ingress.yaml"

    - name: Aplicar Ingress
      ansible.builtin.command: "microk8s kubectl -n {{ K8S_NAMESPACE }} apply -f {{ k8s_tmp_dir }}/40-frontend-ingress.yaml"
      become: false

    - name: Mostrar Ingress
      ansible.builtin.command: "microk8s kubectl -n {{ K8S_NAMESPACE }} get ingress"
      register: ingress_out
      become: false
      failed_when: false

    - name: Mostrar Services
      ansible.builtin.command: "microk8s kubectl -n {{ K8S_NAMESPACE }} get svc"
      register: svc_out
      become: false

    - name: Mostrar Endpoints del frontend
      ansible.builtin.command: "microk8s kubectl -n {{ K8S_NAMESPACE }} get endpoints calendar-frontend -o wide"
      register: ep_out
      become: false
      failed_when: false

    - name: Imprimir Ingress y Services
      ansible.builtin.debug:
        msg:
          - "{{ ingress_out.stdout | default('') }}"
          - "{{ svc_out.stdout | default('') }}"
          - "{{ ep_out.stdout | default('') }}"

    - name: Instrucciones de acceso
      ansible.builtin.debug:
        msg:
          - "Añade en tu PC una entrada en /etc/hosts apuntando el hostname al IP del nodo:"
          - "    192.168.1.24  {{ HOST_NAME }}  # o usa el IP del worker"
          - "Luego accede a: http://{{ HOST_NAME }}"

---
- name: Prepare and deploy calendar app on MicroK8s with Vault and External Secrets
  hosts: controller
  become: yes
  vars:
    manifests_repo: "https://github.com/JhoannPV/k8s-manifests.git"
    manifests_branch: "main"
    manifests_path: "/home/sysadmin/k8s-manifests"
    metallb_cidr: "192.168.1.100-192.168.1.110"

  pre_tasks:
    - name: Ensure MicroK8s is installed
      ansible.builtin.shell: |
        snap list microk8s || snap install microk8s --classic

    - name: Add current user to microk8s group
      ansible.builtin.user:
        name: "{{ ansible_user | default(ansible_user_id) }}"
        groups: microk8s
        append: yes

    - name: Fix kube config permissions
      ansible.builtin.file:
        path: /home/{{ ansible_user | default(ansible_user_id) }}/.kube
        state: directory
        owner: "{{ ansible_user | default(ansible_user_id) }}"
        mode: '0755'

  tasks:
    - name: Enable essential MicroK8s addons (dns, storage, metallb, ingress)
      ansible.builtin.shell: |
        microk8s status --wait-ready
        microk8s enable dns storage
        microk8s enable metallb:{{ metallb_cidr }}
        microk8s enable ingress
        microk8s enable helm3

    - name: Create namespaces
      ansible.builtin.shell: |
        microk8s kubectl apply -f - <<'YAML'
        {{ lookup('file', manifests_path + '/namespaces.yaml') }}
        YAML
      changed_when: false
      when: false  # will apply later after cloning

    - name: Install External Secrets Operator via helm3 (repo add)
      ansible.builtin.shell: |
        microk8s helm3 repo add external-secrets https://charts.external-secrets.io
        microk8s helm3 repo update

    - name: Install External Secrets CRDs (idempotent)
      ansible.builtin.shell: |
        microk8s kubectl apply -f https://raw.githubusercontent.com/external-secrets/external-secrets/main/deploy/crds/bundle.yaml
      register: es_crd_apply
      changed_when: "'configured' in es_crd_apply.stdout or 'created' in es_crd_apply.stdout or 'unchanged' in es_crd_apply.stdout"

    - name: Install External Secrets Operator chart (helm3)
      ansible.builtin.shell: |
        microk8s helm3 upgrade --install external-secrets external-secrets/external-secrets -n external-secrets --create-namespace

    - name: Wait for External Secrets API group to be discoverable (SecretStore)
      ansible.builtin.shell: microk8s kubectl api-resources --api-group=external-secrets.io | grep -q "^secretstores\b"
      register: es_api_secretstores
      retries: 30
      delay: 5
      until: es_api_secretstores.rc == 0
      changed_when: false

    - name: Wait for External Secrets API group to be discoverable (ExternalSecret)
      ansible.builtin.shell: microk8s kubectl api-resources --api-group=external-secrets.io | grep -q "^externalsecrets\b"
      register: es_api_externalsecrets
      retries: 30
      delay: 5
      until: es_api_externalsecrets.rc == 0
      changed_when: false

    - name: Get External Secrets deployments
      ansible.builtin.shell: microk8s kubectl -n external-secrets get deploy -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}'
      register: es_deploys
      changed_when: false

    - name: Wait for External Secrets deployments to be Ready
      ansible.builtin.shell: microk8s kubectl -n external-secrets rollout status deploy/{{ item }} --timeout=240s
      loop: "{{ es_deploys.stdout_lines | default([]) }}"
      when: es_deploys.stdout_lines is defined and es_deploys.stdout_lines | length > 0

    - name: Ensure manifests parent directory exists
      ansible.builtin.file:
        path: "{{ manifests_path }}"
        state: directory
        owner: sysadmin
        group: sysadmin
        mode: '0755'

    - name: Clone k8s manifests repo
      ansible.builtin.git:
        repo: "{{ manifests_repo }}"
        dest: "{{ manifests_path }}"
        version: "{{ manifests_branch }}"
        update: yes
        force: yes
      become_user: sysadmin

    - name: Verify Vault manifest files exist
      ansible.builtin.stat:
        path: "{{ item }}"
      loop:
        - "{{ manifests_path }}/vault/dev-vault.yaml"
        - "{{ manifests_path }}/vault/bootstrap.yaml"
        - "{{ manifests_path }}/vault/k8s-auth-rbac.yaml"
      register: vault_manifest_stats

    - name: Fail if any Vault manifest file is missing
      ansible.builtin.fail:
        msg: "Required Vault manifest file is missing: {{ item.stat.path }}"
      loop: "{{ vault_manifest_stats.results }}"
      when: not item.stat.exists

    - name: Ensure required namespaces exist (calendar-app, vault)
      ansible.builtin.shell: |
        microk8s kubectl get ns calendar-app >/dev/null 2>&1 || microk8s kubectl create ns calendar-app
        microk8s kubectl get ns vault >/dev/null 2>&1 || microk8s kubectl create ns vault
      changed_when: false

    - name: Check if MetalLB CIDR is already configured in any pool
      ansible.builtin.shell: |
        microk8s kubectl get ipaddresspools.metallb.io -A -o jsonpath='{range .items[*]}{range .spec.addresses[*]}{.}{"\n"}{end}{end}' | grep -Fx "{{ metallb_cidr }}"
      register: metallb_cidr_check
      failed_when: false
      changed_when: false

    - name: Create MetalLB IPAddressPool if missing
      ansible.builtin.shell: |
        cat <<'YAML' | microk8s kubectl apply -f -
        apiVersion: metallb.io/v1beta1
        kind: IPAddressPool
        metadata:
          name: default-address-pool
          namespace: metallb-system
        spec:
          addresses:
            - {{ metallb_cidr }}
        YAML
      when: metallb_cidr_check.rc != 0

    - name: Ensure MetalLB L2Advertisement exists
      ansible.builtin.shell: |
        cat <<'YAML' | microk8s kubectl apply -f -
        apiVersion: metallb.io/v1beta1
        kind: L2Advertisement
        metadata:
          name: l2adv
          namespace: metallb-system
        spec: {}
        YAML
      changed_when: false

    - name: Expose MicroK8s ingress controller via LoadBalancer (MetalLB)
      ansible.builtin.shell: |
        cat <<YAML | microk8s kubectl apply -f -
        apiVersion: v1
        kind: Service
        metadata:
          name: ingress-public
          namespace: ingress
        spec:
          type: LoadBalancer
          selector:
            name: nginx-ingress-microk8s
          ports:
            - name: http
              port: 80
              targetPort: 80
            - name: https
              port: 443
              targetPort: 443
        YAML

    - name: Wait for ingress-public to obtain an external IP
      ansible.builtin.shell: microk8s kubectl -n ingress get svc ingress-public -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
      register: ingress_lb_ip
      retries: 20
      delay: 5
      until: ingress_lb_ip.stdout is match('^([0-9]{1,3}\.){3}[0-9]{1,3}$')
      changed_when: false

    - name: Show ingress LoadBalancer IP
      ansible.builtin.debug:
        msg: "Ingress IP: {{ ingress_lb_ip.stdout }}"

    - name: Add calendar.local to /etc/hosts on controller
      ansible.builtin.lineinfile:
        path: /etc/hosts
        create: yes
        backup: yes
        regexp: '.*\\scalendar\.local$'
        line: "{{ ingress_lb_ip.stdout }} calendar.local"
      when: ingress_lb_ip.stdout is defined and ingress_lb_ip.stdout | length > 0

    - name: Deploy Vault (dev mode)
      ansible.builtin.command: microk8s kubectl apply -f {{ manifests_path }}/vault/dev-vault.yaml

    - block:
        - name: Wait for Vault deployment to be Ready (up to 5 minutes)
          ansible.builtin.shell: microk8s kubectl -n vault rollout status deploy/vault --timeout=300s
      rescue:
        - name: Get Vault pods status
          ansible.builtin.shell: microk8s kubectl -n vault get pods -o wide || true
          register: vault_pods
          changed_when: false
        - ansible.builtin.debug:
            var: vault_pods.stdout

        - name: Describe Vault pod
          ansible.builtin.shell: |
            POD=$(microk8s kubectl -n vault get pods -l app=vault -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || true)
            if [ -n "$POD" ]; then microk8s kubectl -n vault describe pod "$POD"; else echo "No Vault pod found"; fi
          register: vault_pod_desc
          changed_when: false
        - ansible.builtin.debug:
            var: vault_pod_desc.stdout

        - name: Show Vault pod logs (last 200 lines)
          ansible.builtin.shell: |
            POD=$(microk8s kubectl -n vault get pods -l app=vault -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || true)
            if [ -n "$POD" ]; then microk8s kubectl -n vault logs "$POD" --tail=200; else echo "No Vault pod found"; fi
          register: vault_pod_logs
          changed_when: false
        - ansible.builtin.debug:
            var: vault_pod_logs.stdout

        - name: Fail due to Vault not ready
          ansible.builtin.fail:
            msg: "Vault did not become ready within the timeout. See pod status/describe/logs above."

    - name: Apply Vault Kubernetes auth RBAC
      ansible.builtin.command: microk8s kubectl apply -f {{ manifests_path }}/vault/k8s-auth-rbac.yaml

    - name: Bootstrap Vault (k8s auth, policies, roles, secrets)
      ansible.builtin.command: microk8s kubectl apply -f {{ manifests_path }}/vault/bootstrap.yaml

    - name: Wait for vault-bootstrap job completion
      ansible.builtin.shell: microk8s kubectl -n vault wait --for=condition=complete --timeout=180s job/vault-bootstrap

    - name: Apply app RBAC
      ansible.builtin.shell: microk8s kubectl apply -f {{ manifests_path }}/calendar-app-rbac.yaml

    - name: Apply SecretStore (requires ESO CRDs)
      ansible.builtin.shell: microk8s kubectl apply -f {{ manifests_path }}/external-secrets/secret-store.yaml

    - name: Apply ExternalSecrets (requires ESO CRDs)
      ansible.builtin.shell: microk8s kubectl apply -f {{ manifests_path }}/external-secrets/app-secrets.yaml

    - name: Deploy MongoDB, Backend, Frontend and services
      ansible.builtin.shell: |
        microk8s kubectl apply -f {{ manifests_path }}/mongodb.yaml
        microk8s kubectl apply -f {{ manifests_path }}/backend.yaml
        microk8s kubectl apply -f {{ manifests_path }}/backend-lb.yaml
        microk8s kubectl apply -f {{ manifests_path }}/frontend.yaml
        microk8s kubectl apply -f {{ manifests_path }}/frontend-lb.yaml

    - name: Wait for deployments to be Ready
      ansible.builtin.shell: |
        microk8s kubectl -n calendar-app rollout status deploy/mongodb --timeout=180s
        microk8s kubectl -n calendar-app rollout status deploy/calendar-backend --timeout=180s
        microk8s kubectl -n calendar-app rollout status deploy/calendar-frontend --timeout=180s

  post_tasks:
    - name: Show resources in vault namespace (for debugging)
      ansible.builtin.shell: |
        microk8s kubectl -n vault get all || true
      register: vault_ns_resources
      changed_when: false
    - ansible.builtin.debug:
        var: vault_ns_resources.stdout
    - name: Show service addresses
      ansible.builtin.shell: |
        microk8s kubectl -n calendar-app get svc
      register: svc_out
    - ansible.builtin.debug:
        var: svc_out.stdout
